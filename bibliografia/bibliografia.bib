
@inproceedings{volder_cordic_1959,
	address = {San Francisco, California},
	series = {{IRE}-{AIEE}-{ACM} '59 ({Western})},
	title = {The {CORDIC} computing technique},
	isbn = {978-1-4503-7865-9},
	url = {https://doi.org/10.1145/1457838.1457886},
	doi = {10.1145/1457838.1457886},
	abstract = {The "Coordinate Rotation DIgital Computer" computing technique can be used to solve, in one computing operation and with equal speed, the relationships involved in plane coordinate rotation; conversion from rectangular to polar coordinates; multiplication; division; or the conversion between a binary - and a mixed-radix system.},
	urldate = {2020-02-25},
	booktitle = {Papers presented at the the {March} 3-5, 1959, western joint computer conference},
	publisher = {Association for Computing Machinery},
	author = {Volder, Jack},
	month = mar,
	year = {1959},
	pages = {257--261},
	file = {1959 The CORDIC Trigonometric Computing Technique.pdf:/home/vladislove/Zotero/storage/P2X3JTRY/1959 The CORDIC Trigonometric Computing Technique.pdf:application/pdf}
}

@inproceedings{hou_low_2019,
	title = {A {Low} {Latency} {Floating} {Point} {CORDIC} {Algorithm} for {Sin}/{Cosine} {Function}},
	doi = {10.1109/SIPROCESS.2019.8868623},
	abstract = {The CORDIC algorithm computes trigonometric functions just by shifting and adding. It is widely used due to low hardware complexity. However, the excessive number of iterations is a bottleneck for the optimization of the CORDIC. Based on IEEE754 double-precision floating-point, this paper uses 4-step iteration in each cycle, which improving precision and shortening the calculation period. With the range between the input angle Z and the x, y axis is greater than 2-6, while Z∈[-216,216], the accuracy of sine/cosine function is guaranteed within one ulp. The hardware architecture is coded using the Verilog language and integrated to derive its performance.},
	booktitle = {2019 {IEEE} 4th {International} {Conference} on {Signal} and {Image} {Processing} ({ICSIP})},
	author = {Hou, Nanxin and Wang, Mingjiang and Zou, Xiafeng and Liu, Ming},
	month = jul,
	year = {2019},
	note = {ISSN: null},
	keywords = {CORDIC, Image processing, trigonometric functions, Circuits and systems, Conferences, Digital arithmetic, Digital signal processing, double-precision, floating point arithmetic, floating-point, hardware complexity, IEEE transactions, IEEE754 double-precision floating-point, iterative methods, low latency, low latency floating point CORDIC algorithm, Manganese, sin/cosine},
	pages = {751--755},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/P8UPQEGG/8868623.html:text/html;Hou et al. - 2019 - A Low Latency Floating Point CORDIC Algorithm for .pdf:/home/vladislove/Zotero/storage/9C445I6S/Hou et al. - 2019 - A Low Latency Floating Point CORDIC Algorithm for .pdf:application/pdf}
}

@article{dhume_parameterizable_2012,
	title = {Parameterizable {CORDIC}-{Based} {Floating}-{Point} {Library} {Operations}},
	language = {en},
	author = {Dhume, Nikhil and Srinivasakannan, Ramakrishnan},
	year = {2012},
	pages = {18},
	file = {Dhume and Srinivasakannan - 2012 - Parameterizable CORDIC-Based Floating-Point Librar.pdf:/home/vladislove/Zotero/storage/NQ9BPZIJ/Dhume and Srinivasakannan - 2012 - Parameterizable CORDIC-Based Floating-Point Librar.pdf:application/pdf}
}

@inproceedings{walther_unified_1971,
	address = {Atlantic City, New Jersey},
	title = {A unified algorithm for elementary functions},
	url = {http://portal.acm.org/citation.cfm?doid=1478786.1478840},
	doi = {10.1145/1478786.1478840},
	abstract = {This paper describes a single unified algorithm for the calculation of elementary functions including multiplication, division, sin, cos, tan, arctan, sinh, cosh, tanh, arctanh, In, exp and square-root. The basis for the algorithm is coordinate rotation in a linear, circular, or hyperbolic coordinate system depending on which function is to be calculated. The only operations required are shifting, adding, subtracting and the recall of prestored constants. The limited domain of convergence of the algorithm is calculated, leading to a discussion of the modifications required to extend the domain for floating point calculations.},
	language = {en},
	urldate = {2020-02-25},
	booktitle = {Proceedings of the {May} 18-20, 1971, spring joint computer conference on - {AFIPS} '71 ({Spring})},
	publisher = {ACM Press},
	author = {Walther, J. S.},
	year = {1971},
	pages = {379},
	file = {Walther - 1971 - A unified algorithm for elementary functions.pdf:/home/vladislove/Zotero/storage/B2K5QNTL/Walther - 1971 - A unified algorithm for elementary functions.pdf:application/pdf}
}

@article{meher_50_2009,
	title = {50 {Years} of {CORDIC}: {Algorithms}, {Architectures}, and {Applications}},
	volume = {56},
	issn = {1558-0806},
	shorttitle = {50 {Years} of {CORDIC}},
	doi = {10.1109/TCSI.2009.2025803},
	abstract = {Year 2009 marks the completion of 50 years of the invention of CORDIC (coordinate rotation digital computer) by Jack E. Volder. The beauty of CORDIC lies in the fact that by simple shift-add operations, it can perform several computing tasks such as the calculation of trigonometric, hyperbolic and logarithmic functions, real and complex multiplications, division, square-root, solution of linear systems, eigenvalue estimation, singular value decomposition, QR factorization and many others. As a consequence, CORDIC has been utilized for applications in diverse areas such as signal and image processing, communication systems, robotics and 3-D graphics apart from general scientific and technical computation. In this article, we present a brief overview of the key developments in the CORDIC algorithms and architectures along with their potential and upcoming applications.},
	number = {9},
	journal = {IEEE Transactions on Circuits and Systems I: Regular Papers},
	author = {Meher, Pramod K. and Valls, Javier and Juang, Tso-Bing and Sridharan, K. and Maharatna, Koushik},
	month = sep,
	year = {2009},
	note = {Conference Name: IEEE Transactions on Circuits and Systems I: Regular Papers},
	keywords = {Application software, Arithmetic circuits, Computer architecture, coordinate rotation digital computer, CORDIC, CORDIC algorithms, digital arithmetic, digital signal processing chip, eigenvalue estimation, Eigenvalues and eigenfunctions, Graphics, hyperbolic functions, Image processing, Lifting equipment, linear systems, Linear systems, logarithmic functions, QR factorization, Robot kinematics, shift-add operations, signal processing, Signal processing, singular value decomposition, Singular value decomposition, trigonometric functions, VLSI},
	pages = {1893--1907},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/9G9TJDDU/5089431.html:text/html;Accepted Version:/home/vladislove/Zotero/storage/YZQS8PVH/Meher et al. - 2009 - 50 Years of CORDIC Algorithms, Architectures, and.pdf:application/pdf}
}

@article{nguyen_low-resource_2015,
	title = {Low-resource low-latency hybrid adaptive {CORDIC} with floating-point precision},
	volume = {12},
	issn = {1349-2543},
	url = {https://www.jstage.jst.go.jp/article/elex/12/9/12_12.20150258/_article},
	doi = {10.1587/elex.12.20150258},
	abstract = {Despite being proposed since more than 50 years ago, COordinate Rotation DIgital Computer (CORDIC) is still one of the most effective algorithms for elementary function calculation so far. Original CORDIC, however, suffers high latency due to its nature of unvarying number of rotations. As a result, a low-latency hybrid adaptive (HA) CORDIC is proposed in this paper. Firstly, adaptive angle selection decreases total iterations up to 50\% with respect to higher accuracy of results. Secondly, hybrid architecture including ﬁxed-point input and ﬂoating-point output reduces the total hardware utilization and enhances the dynamic range of ﬁnal results. Lastly, parallel and pipeline processing together with resource sharing technique allow the design to operate fully at 175.7 MHz with low resource consumption — 1,139 LUTs and 489 registers.},
	language = {en},
	number = {9},
	urldate = {2020-07-01},
	journal = {IEICE Electronics Express},
	author = {Nguyen, Hong-Thu and Nguyen, Xuan-Thuan and Hoang, Trong-Thuc and Le, Duc-Hung and Pham, Cong-Kha},
	year = {2015},
	pages = {20150258--20150258},
	file = {Nguyen et al. - 2015 - Low-resource low-latency hybrid adaptive CORDIC wi.pdf:/home/vladislove/Zotero/storage/8RTIXTCR/Nguyen et al. - 2015 - Low-resource low-latency hybrid adaptive CORDIC wi.pdf:application/pdf}
}

@inproceedings{de_lange_optimal_1988,
	title = {An optimal floating-point pipeline {CMOS} {CORDIC} processor},
	doi = {10.1109/ISCAS.1988.15343},
	abstract = {The authors present a VLSI CORDIC processor which is obtained using the hierarchical and interactive design methodology on which the DELFT VLSI synthesis is built. They also present an optimized (floating-point) CORDIC algorithm, the hierarchical mapping of this algorithm on a floating-point architecture, the design method, the layout, the chip, and its performance. Algorithm, architecture, and layout are parameterized with respect to the accuracy of rotation angles and vectors. The CORDIC chip is a pipeline that performs 10/sup 7/ plane rotations/s and is mounted in a 144-pin package. The vector entries are 21 bit floating-point numbers (16-bit mantissa and 5 bit exponent in twos complement).{\textless}{\textgreater}},
	booktitle = {1988., {IEEE} {International} {Symposium} on {Circuits} and {Systems}},
	author = {de Lange, A.A.J. and van der Hoeven, A.J. and Deprettere, E.F. and Bu, J.},
	month = jun,
	year = {1988},
	keywords = {digital arithmetic, VLSI, Algorithm design and analysis, Pipelines, Signal processing algorithms, 144-pin package, Analytical models, circuit layout CAD, Circuit simulation, CMOS integrated circuits, CMOS process, DELFT VLSI synthesis, Design methodology, floating-point architecture, floating-point pipeline CMOS CORDIC processor, hierarchical design, interactive design, layout, Macrocell networks, microprocessor chips, pipeline processing, rotation angles, Silicon compiler, Very large scale integration, VLSI CORDIC processor},
	pages = {2043--2047 vol.3},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/QL6RBWLW/15343.html:text/html}
}

@inproceedings{hekstra_floating_1993,
	title = {Floating point {Cordic}},
	doi = {10.1109/ARITH.1993.378100},
	abstract = {A full-precision floating-point Cordic algorithm, suitable for the implementation of a word-serial Cordic architecture, is presented. The extension to existing block floating-point Cordic algorithms is in a floating-point representation for the angle. The angle is represented as a combination of exponent, microrotation bits, and two bits to indicate prerotations over /spl pi/2 and /spl pi/ radians. Representing floating-point angles in this fashion maintains the accuracy that is present in the input data, which makes it ideally suited for implementing a floating-point Givens operator.{\textless}{\textgreater}},
	booktitle = {Proceedings of {IEEE} 11th {Symposium} on {Computer} {Arithmetic}},
	author = {Hekstra, G.J. and Deprettere, E.F.A.},
	month = jun,
	year = {1993},
	keywords = {Computer architecture, floating point arithmetic, floating-point, floating-point representation, Hardware, Vectors, Equations, Clocks, Cordic algorithms, Floating-point arithmetic, full-precision, Givens operator},
	pages = {130--137},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/5PF8LETD/378100.html:text/html}
}

@inproceedings{yeshwanth_high-speed_2018,
	title = {High-{Speed} {Single} {Precision} {Floating} {Point} {Multiplier} using {CORDIC} {Algorithm}},
	doi = {10.1109/ICEECCOT43722.2018.9001506},
	abstract = {Floating point arithmetic has paramount necessity in computer systems. Floating point multiplier is appreciably used in numerous applications which yearn for speed. Generally, floating point multiplier requires 23×23 mantissa multiplication and 8-bit exponent addition. Thus, delay of the mantissa multiplication plays a crucial role in boosting the speed. In this paper, the prime proposal is to increase the speed of the single precision floating point multiplier by implementing mantissa multiplication using CORDIC algorithm and exponent addition using Kogge-Stone adder which results in increasing the speed by several folds. Further, the performance of floating point multiplier using CORDIC algorithm and VEDIC multiplier is contemplated in terms of area, delay and power. Floating point multiplier was designed in VHDL using XILINX ISE 14.7 and implemented in XILINX Spartan 6e board. The proposed idea has shown better performance in terms of speed.},
	booktitle = {2018 {International} {Conference} on {Electrical}, {Electronics}, {Communication}, {Computer}, and {Optimization} {Techniques} ({ICEECCOT})},
	author = {Yeshwanth, Balaji and Venkatesh, Vutukuri and Akhil, Repala},
	month = dec,
	year = {2018},
	keywords = {Computer architecture, floating point arithmetic, Adders, CORDIC algorithm, Pipelines, Signal processing algorithms, Clocks, adders, Delays, floating point multiplier, hardware description languages, high-speed single precision, Kogge-Stone adder, logic design, mantissa multiplication, multiplying circuits, Parallel Prefixadder, Routing, Single precision floating point multiplier, Vedic multiplier, VEDIC multiplier, VHDL, XILINX ISE 14.7, XILINX Spartan 6e board},
	pages = {135--141},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/THHRTWM6/9001506.html:text/html}
}

@misc{leibson_9100_2005,
	title = {The 9100 {Part} 2},
	url = {http://www.hp9825.com/html/the_9100_part_2.html},
	urldate = {2020-07-02},
	author = {Leibson, Steve},
	year = {2005},
	file = {The 9100 Part 2:/home/vladislove/Zotero/storage/YSIL625F/the_9100_part_2.html:text/html}
}

@article{schelin_calculator_1983,
	title = {Calculator {Function} {Approximation}},
	volume = {90},
	issn = {0002-9890},
	url = {https://doi.org/10.1080/00029890.1983.11971220},
	doi = {10.1080/00029890.1983.11971220},
	number = {5},
	urldate = {2020-07-02},
	journal = {The American Mathematical Monthly},
	author = {Schelin, Charles W.},
	month = may,
	year = {1983},
	note = {Publisher: Taylor \& Francis
\_eprint: https://doi.org/10.1080/00029890.1983.11971220},
	pages = {317--325},
	file = {Snapshot:/home/vladislove/Zotero/storage/TBL5ZGGG/00029890.1983.html:text/html}
}

@article{wang_gh_2020,
	title = {{GH} {CORDIC}-{Based} {Architecture} for {Computing} \${N}\$ th {Root} of {Single}-{Precision} {Floating}-{Point} {Number}},
	volume = {28},
	issn = {1557-9999},
	doi = {10.1109/TVLSI.2019.2959847},
	abstract = {This article presents hardware implementation for computing arbitrary roots of a single-precision floating-point number. The proposed architecture is based on Generalized Hyperbolic COordinate Rotation Digital Computer (GH CORDIC) algorithm. Benefiting from the wide range of floating-point numbers, our design is able to compute the Nth root (N ≥ 2) of a single-precision floating-point number. After implementation, a series of tests have been carried out, including accuracy, power consumption, performance comparison, and so on. Simulation results indicate that our proposed method is capable of calculating the Nth root of a positive single-precision floating-point number with a relative error of 10-7 approximately and promises an error-flatten performance. Synthesized results from a design compiler under TSMC-40-nm CMOS technology show that our design can achieve the highest frequency of 2.38 GHz with the area consumption of 140894.44 μm2 and power consumption of 86.9573 mW.},
	number = {4},
	journal = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
	author = {Wang, Yuxuan and Luo, Yuanyong and Wang, Zhongfeng and Shen, Qinghong and Pan, Hongbing},
	month = apr,
	year = {2020},
	note = {Conference Name: IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
	keywords = {Computer architecture, Graphics, floating point arithmetic, Hardware, Field programmable gate arrays, Mathematical model, CMOS integrated circuits, Very large scale integration, Binary floating point (BFP), COordinate Rotation Digital Computer (CORDIC), frequency 2.38 GHz, Generalized Hyperbolic COordinate Rotation Digital Computer algorithm, GH CORDIC-based architecture, high speed, Nth root, positive single-precision floating-point number, power 86.9573 mW, Standards},
	pages = {864--875},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/AAMCW6RE/8948355.html:text/html}
}

@inproceedings{zhou_double_2008,
	title = {Double {Precision} {Hybrid}-{Mode} {Floating}-{Point} {FPGA} {CORDIC} {Co}-processor},
	doi = {10.1109/HPCC.2008.14},
	abstract = {FPGA chips have become a promising option for accelerating scientific applications, which involve many floating-point transcendental functions, such as sin, log, exp, sqrt and etc. In this paper, we present a 64-bit ANSI/IEEE floating-point CORDIC co-processor on FPGA, providing all known CORDIC functions. And there is no 64-bit CORDIC implementation on FPGA known to us. We propose a hybrid-mode CORDIC algorithm, combining hybrid rotation angle methods with argument reduction algorithm to reduce hardware area usage and meanwhile keep unlimited convergence domain for any floating-point inputs of the functions. Our hybrid-mode CORDIC co-processor is organized into three phases, argument reduction, CORDIC calculation and normalization with 69 pipeline stages for FPGA implementation. The synthesis results show the clock frequency can reach 173 MHz on Xilinx Virtex5 FPGA. Comparing to general-purpose microprocessor in three scientific program kernels, the CORDIC co-processor can achieve a maximum speedup of 49.3 times, 28.7 times in average.},
	booktitle = {2008 10th {IEEE} {International} {Conference} on {High} {Performance} {Computing} and {Communications}},
	author = {Zhou, Jie and Dou, Yong and Lei, Yuanwu and Xu, Jinbo and Dong, Yazhuo},
	month = sep,
	year = {2008},
	keywords = {CORDIC, floating point arithmetic, floating-point, Convergence, Hardware, Algorithm design and analysis, argument reduction algorithm, clock frequency, coprocessors, double precision, double precision hybrid-mode floating-point FPGA, Equations, field programmable gate arrays, Field programmable gate arrays, floating-point CORDIC co-processor, floating-point transcendental functions, FPGA, hybrid-mode, Mathematical model, Pipelines, Xilinx Virtex5 FPGA},
	pages = {182--189},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/TNIARNL8/4637696.html:text/html}
}

@inproceedings{evangelista_fully-pipelined_2018,
	title = {Fully-pipelined {CORDIC}-based {FPGA} {Realization} for a 3-{DOF} {Hexapod}-{Leg} {Inverse} {Kinematics} {Calculation}},
	doi = {10.1109/WRC-SARA.2018.8584238},
	abstract = {This paper presents a CORDIC-based FPGA realization for a 3-DOF hexapod-leg inverse kinematics calculation. This architecture design proposal is approached first by an inverse kinematics equations analysis and how are these adapted to design an architecture scheme based on CORDIC operations. After that, a 3-DOF hexapod-leg working area is analyzed to get the CORDIC convergence requirements. Subsequently, we designed an iterative 32-bit floating point CORDIC entity that met the convergence and accuracy requirements. Moreover, a fully pipelined VLSI architecture is designed, respective hardware and clock signaling considerations are described in order to achieve high frequency and throughput. Finally, both results proposed and obtained through the kinematic calculations software, which included the angles equations used to calculate precision, hardware requirements and processing speed.},
	booktitle = {2018 {WRC} {Symposium} on {Advanced} {Robotics} and {Automation} ({WRC} {SARA})},
	author = {Evangelista, Guillermo and Olaya, Carlos and Rodríguez, Erick},
	month = aug,
	year = {2018},
	keywords = {CORDIC, VLSI, floating point arithmetic, Convergence, Hardware, field programmable gate arrays, FPGA, pipeline arithmetic, Read only memory, pipeline processing, Clocks, architecture design proposal, architecture scheme, CORDIC convergence requirements, CORDIC operations, CORDIC-based FPGA realization, fully pipelined VLSI architecture, hexapod-leg inverse kinematics calculation, hexapod-leg working area, hexapod-leg., inverse kinematics equations analysis, iterative 32-bit floating point CORDIC entity, kinematic calculations software, Kinematics, kinematics calculation, legged locomotion, Legged locomotion, robot kinematics, word length 32 bit},
	pages = {237--242},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/ZCPMEAMU/8584238.html:text/html}
}

@article{parker_abstract_2011,
	title = {Abstract – {Floating} {Point}},
	url = {https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/wp/designcon2011-floating-point-design-flow.pdf},
	abstract = {Floating-point processing utilizes a format defined in IEEE754, and is supported by microprocessor architectures.However, the IEEE754 format is inefficient to implement in hardware, andfloating-pointprocessingis not supported in VHDL or Verilog. Newer versions, such as SystemVerilog, allowfloating-pointvariables, but industry-standard synthesis tools do not support floating-pointtechnology.This paper describesa new approach which efficiently implementsfloating-point data processing in hardware architectures, specifically FPGAs. This allowsfor extremely high rates of floating-point processing, of at least1 TeraFLOPSin a single FPGA die, and with significantly better power efficiency than the microprocessor-based alternatives.},
	language = {en},
	journal = {DesignCon 2011},
	author = {Parker, Michael},
	year = {2011},
	pages = {15},
	file = {Abstract – Floating Point.pdf:/home/vladislove/Zotero/storage/BUTM4NQD/Abstract – Floating Point.pdf:application/pdf}
}

@article{tso-bing_juang_para-cordic_2004,
	title = {Para-{CORDIC}: parallel {CORDIC} rotation algorithm},
	volume = {51},
	issn = {1558-0806},
	shorttitle = {Para-{CORDIC}},
	doi = {10.1109/TCSI.2004.832734},
	abstract = {In this paper, the parallel COrdinate Rotation DIgital Computer (CORDIC) rotation algorithm in circular and hyperbolic coordinate is proposed. The most critical path of the conventional CORDIC rotation lies in the determination of rotation directions, which depends on the sign of the remaining angle after each iteration. Using the binary-to-bipolar recoding (BBR) and microrotation angle recoding techniques, the rotation directions can be predicted directly from the binary value of the initial input angle. The original sequential CORDIC rotations can be divided into two phases where the rotations in each phase can be executed in parallel. Our proposed architectures have a more regular and simpler prediction scheme compared to previous approaches. The critical path delay is reduced since the concurrently predicted rotations can be combined using multioperand carry-save addition structures.},
	number = {8},
	journal = {IEEE Transactions on Circuits and Systems I: Regular Papers},
	author = {Tso-Bing Juang and Shen-Fu Hsiao and Ming-Yu Tsai},
	month = aug,
	year = {2004},
	note = {Conference Name: IEEE Transactions on Circuits and Systems I: Regular Papers},
	keywords = {Computer architecture, coordinate rotation digital computer, digital arithmetic, Vectors, Signal processing algorithms, binary value, binary-to-bipolar recoding, circular coordinate, Computer science, Concurrent computing, critical path delay, Delay, hyperbolic coordinate, initial input angle, Iterative algorithms, Matrix decomposition, microrotation angle recoding, multioperand carry-save addition structures, para-CORDIC, parallel algorithms, parallel architectures, parallel CORDIC rotation algorithm, rotation directions, Two dimensional displays},
	pages = {1515--1524},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/MGZHLY9Z/1323204.html:text/html}
}

@article{fang_generation_2019,
	title = {Generation scheme of chirp scaling phase functions based on floating-point {CORDIC} processor},
	volume = {2019},
	issn = {2051-3305},
	doi = {10.1049/joe.2019.0623},
	abstract = {This study presents a chirp scaling (CS) phase function generation scheme based on CORDIC algorithm, it adopts single precision floating-point CORDIC processor to implement a variety of non-linear operations which are involved in CS synthetic aperture radar (SAR) imaging algorithm. We extend the range of convergence of CORDIC algorithm and reduce the data width in rotation unit module by adopting a hardware resource reduction scheme. We also adopt a unified CORDIC processor to achieve square root, multiplication, and division operation, which can substitute multiple single-function processors and simplify the complicate arithmetic in CS algorithm. As a proof of concept, we verify the performance of the proposed design scheme on Xilinx XC7VX690T FPGA platform, it is also applied to 16384 × 16384 points target SAR imaging system, the FPGA resource occupancy of the CS phase function generation module demonstrates that the usage of CORDIC processor can effectively save the consumption of hardware resources, and the maximum operating frequency is acceptable. The accuracy of phase functions can satisfy the engineering requirements.},
	number = {21},
	journal = {The Journal of Engineering},
	author = {Fang, Linlin and Xie, Yizhuang and Li, Bingyi and Chen, He},
	year = {2019},
	note = {Conference Name: The Journal of Engineering},
	keywords = {floating point arithmetic, CORDIC algorithm, field programmable gate arrays, logic design, chirp scaling phase function generation scheme, chirp scaling phase functions, CS synthetic aperture radar imaging algorithm, division operation, function generators, hardware resource reduction scheme, multiplication operation, nonlinear operations, radar imaging, SAR imaging system, single precision floating-point CORDIC processor, square root operation, synthetic aperture radar, unified CORDIC processor, Xilinx XC7VX690T FPGA platform},
	pages = {7436--7439},
	file = {IEEE Xplore Full Text PDF:/home/vladislove/Zotero/storage/CCLV2N8D/Fang et al. - 2019 - Generation scheme of chirp scaling phase functions.pdf:application/pdf;IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/LDQ7XD3A/8916167.html:text/html}
}

@misc{noauthor_intro_nodate,
	title = {Intro - {Verilator} - {Veripool}},
	url = {https://www.veripool.org/wiki/verilator},
	urldate = {2020-07-16},
	file = {Intro - Verilator - Veripool:/home/vladislove/Zotero/storage/JAZSFA4C/verilator.html:text/html}
}

@misc{noauthor_manual-verilator_nodate,
	title = {Manual-verilator - {Verilator} - {Veripool}},
	url = {https://www.veripool.org/projects/verilator/wiki/Manual-verilator},
	urldate = {2020-07-23},
	file = {Manual-verilator - Verilator - Veripool:/home/vladislove/Zotero/storage/HHXD6QLU/Manual-verilator.html:text/html}
}

@incollection{lameres_modeling_2019,
	address = {Cham},
	title = {Modeling {Finite} {State} {Machines}},
	isbn = {978-3-030-10552-5},
	url = {https://doi.org/10.1007/978-3-030-10552-5_8},
	abstract = {In this chapter, we will look at modeling finite state machines (FSMs). An FSM is one of the most powerful circuits in a digital system because it can make decisions about the next output based on both the current and past inputs. Finite state machines are modeled using the constructs already covered in this book. In this chapter, we will look at the widely accepted three-process model for designing a FSM.},
	language = {en},
	urldate = {2020-07-27},
	booktitle = {Quick {Start} {Guide} to {Verilog}},
	publisher = {Springer International Publishing},
	author = {LaMeres, Brock J.},
	editor = {LaMeres, Brock J.},
	year = {2019},
	doi = {10.1007/978-3-030-10552-5_8},
	pages = {113--127}
}

@incollection{lameres_verilog_2019,
	address = {Cham},
	title = {Verilog {Constructs}},
	isbn = {978-3-030-10552-5},
	url = {https://doi.org/10.1007/978-3-030-10552-5_2},
	abstract = {This chapter begins looking at the basic construction of a Verilog module. The chapter begins by covering the built-in features of a Verilog module including the file structure, data types, operators, and declarations. It provides a foundation of Verilog that will lead to modeling examples provided in Chap. 3. The original Verilog standard (IEEE 1364) has been updated numerous times since its creation in 1995. The most significant update occurred in 2001, which was titled IEEE 1394-2001. In 2005, minor improvements were added to the standard, which resulted in IEEE 1394-2005. The constructs described in this book reflect the functionality in the IEEE 1394-2005 standard. The functionality of Verilog (e.g., operators, signal types, functions) is defined within the Verilog standard; thus, it is not necessary to explicitly state that a design is using the IEEE 1394 package because it is inherent in the use of Verilog.},
	language = {en},
	urldate = {2020-07-27},
	booktitle = {Quick {Start} {Guide} to {Verilog}},
	publisher = {Springer International Publishing},
	author = {LaMeres, Brock J.},
	editor = {LaMeres, Brock J.},
	year = {2019},
	doi = {10.1007/978-3-030-10552-5_2},
	pages = {13--22}
}

@incollection{lameres_computer_2019,
	address = {Cham},
	title = {Computer {System} {Design}},
	isbn = {978-3-030-10552-5},
	url = {https://doi.org/10.1007/978-3-030-10552-5_11},
	abstract = {This chapter presents the design of a simple computer system that will illustrate the use of many of the Verilog modeling techniques covered in this book. The goal of this chapter is not to provide an in-depth coverage of modern computer architecture, but rather to present a simple operational computer that can be implemented in Verilog to show how to use many of the modeling techniques covered thus far. The chapter begins with some architectural definitions so that consistent terminology can be used throughout the computer design example.},
	language = {en},
	urldate = {2020-07-27},
	booktitle = {Quick {Start} {Guide} to {Verilog}},
	publisher = {Springer International Publishing},
	author = {LaMeres, Brock J.},
	editor = {LaMeres, Brock J.},
	year = {2019},
	doi = {10.1007/978-3-030-10552-5_11},
	pages = {143--186}
}

@article{das_unified_2002,
	title = {Unified {CORDIC}-based chip to realise {DFT}/{DHT}/{DCT}/{DST}},
	volume = {149},
	doi = {10.1049/ip-cdt:20020429},
	abstract = {Frequency analysis using the DFT, the DHT, the DCT or the DST is an obvious choice for the entire image and signal processing domain. A chip has been designed to obtain a unified architecture for the
DFT/DHT/DCT/DST called DXT. For the low-power budget of many signal processing requirements, e.g. biomedical signal processing, a parallel and pipelined architecture is adopted for the unified design. The parallelism environment provides a real-time and low-power application of biomedical and other signal processing requirements, whereas the pipelined structure ensures high throughput of the design. The DXT architecture uses a CORDIC unit as the basic processing element. The UMC library (europractice) of 0.25 micron CMOS technology has been used to obtain a DXT chip of transform length '7' for the synchronous design. The total dynamic power was found to be 204.89 mW, with an operating frequency of 160 MHz and an operating voltage of 2.5 V},
	journal = {Computers and Digital Techniques, IEE Proceedings -},
	author = {Das, Bipul and Banerjee, S.},
	month = aug,
	year = {2002},
	pages = {121--127}
}

@article{lee_maximum_1987,
	title = {A maximum pipelined {CORDIC} architecture for inverse kinematic position computation},
	volume = {5},
	issn = {0882-4967},
	url = {https://www.infona.pl//resource/bwmeta1.element.ieee-art-000001087126},
	doi = {10.1109/JRA.1987.1087126},
	abstract = {A cost-effective coordinate rotation digital computer (CORDIC) architecture is described for the computation of inverse kinematic position solution based on a functional decomposition of the closed-form joint equations. The functional decomposition shows a limited amount of parallelism with a large amount of sequentialism in the flow of computation and data dependencies and reveals the requirement for computing a large set of elementary operations: multiplications, additions, divisions, square roots, trigonometric functions and their inverse. However, these elementary operations, in general, cannot be efficiently computed in general-purpose uniprocessor computers. The CORDIC algorithms are the natural candidates for efficiently computing these elementary operations and the interconnection of these CORDIC processors to exploit the great potential of pipelining provides a better solution for computing the inverse kinematic position solution. The functional decomposition of the inverse kinematic position solution into a set of computational tasks can be represented as a directed task graph. The inclusion of input data modifies the task graph to an acyclic data dependency graph (ADDG). The nodes of the ADDG correspond to the computational modules, each of which can be realized by a CORDIC processor. The operands or data move along the edges, each of which connects a pair of nodes. Due to different paths and computation time for each CORDIC processor, operands may arrive at multi-input modules at different arrival time, causing a longer pipelined time. Delay buffers may be inserted at various paths to achieve a balanced ADDG. The optimal buffer assignment problem is reduced to an integer linear optimization problem which can be solved easily by computers. The realization of the balanced ADDG results in a maximum pipelined CORDIC architecture with a minimum number of delay buffer stages for the computation of inverse kinematic position solution.},
	language = {English},
	number = {3},
	urldate = {2020-07-28},
	journal = {IEEE Journal on Robotics and Automation},
	author = {Lee, C. S. and Chang, P.},
	year = {1987},
	pages = {445--458},
	file = {Snapshot:/home/vladislove/Zotero/storage/JUMZVLSL/bwmeta1.element.html:text/html}
}

@article{lang_high-throughput_2005,
	title = {High-throughput {CORDIC}-based geometry operations for {3D} computer graphics},
	volume = {54},
	doi = {10.1109/TC.2005.53},
	abstract = {Graphics processors require strong arithmetic support to perform computational kernels over data streams. Because of the current implementation using the basic arithmetic operations, the algorithms are given in algebraic terms. However, since the operations are really of a geometric nature, it seems to us that more flexibility in the implementation is obtained if the description is given in a high-level geometrical form. As a consequence of this line of thought, this paper is an attempt to reconsider some kernels in a graphics processor to obtain implementations that are potentially more scalable than just replicating the modules used in conventional implementations. We present the formulation of representative 3D computer graphics operations in terms of CORDIC-type primitives. Then, we briefly outline a stream processor based on CORDIC-type modules to efficiently implement these graphic operations. We perform a rough comparison with current implementations and conclude that the CORDIC-based alternative might be attractive.},
	journal = {Computers, IEEE Transactions on},
	author = {Lang, TS and Antelo, Elisardo},
	month = apr,
	year = {2005},
	pages = {347--361}
}

@article{valls_use_2006,
	title = {The use of {CORDIC} in software defined radios: a tutorial},
	volume = {44},
	issn = {1558-1896},
	shorttitle = {The use of {CORDIC} in software defined radios},
	doi = {10.1109/MCOM.2006.1705978},
	abstract = {CORDIC is a versatile algorithm widely used for VLSI implementation of digital signal processing applications. This article presents a tutorial of how to use CORDIC to implement different communication subsystems that can be found in a software defined radio. Specifically, it shows how to use CORDIC to implement direct digital synthesizers, AM, PM, and FM analog modulators and ASK, PSK and FSK modulators, up-/down-converters of in-phase and quadrature signals, full mixers for complex signals, and phase detection for synchronizers. The article also shows some tricks to efficiently implement the algorithm},
	number = {9},
	journal = {IEEE Communications Magazine},
	author = {Valls, J. and Sansaloni, T. and Perez-Pascual, A. and Torres, V. and Almenar, V.},
	month = sep,
	year = {2006},
	note = {Conference Name: IEEE Communications Magazine},
	keywords = {AM analog modulators, amplitude shift keying, Amplitude shift keying, analogue-digital conversion, Application software, ASK, CORDIC, Digital modulation, Digital signal processing, digital-analogue conversion, direct digital synthesis, direct digital synthesizers, down-converters, FM analog modulators, frequency shift keying, FSK, full mixers, in-phase signals, mixers (circuits), modulators, phase detection, Phase modulation, phase shift keying, PM analog modulators, PSK, quadrature signals, signal processing, Signal processing algorithms, software defined radios, software radio, Software radio, Synthesizers, Tutorial, up-converters, Very large scale integration},
	pages = {46--50},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/FUSTLRAC/1705978.html:text/html}
}

@article{hu_cordic-based_1992,
	title = {{CORDIC}-based {VLSI} architectures for digital signal processing},
	volume = {9},
	issn = {1558-0792},
	doi = {10.1109/79.143467},
	abstract = {The evolution of CORDIC, an iterative arithmetic computing algorithm capable of evaluating various elementary functions using a unified shift-and-add approach, and of CORDIC processors is reviewed. A method to utilize a CORDIC processor array to implement digital signal processing algorithms is presented. The approach is to reformulate existing DSP algorithms so that they are suitable for implementation with an array performing circular or hyperbolic rotation operations. Three categories of algorithm are surveyed: linear transformations, digital filters, and matrix-based DSP algorithms.{\textless}{\textgreater}},
	number = {3},
	journal = {IEEE Signal Processing Magazine},
	author = {Hu, Y.H.},
	month = jul,
	year = {1992},
	note = {Conference Name: IEEE Signal Processing Magazine},
	keywords = {Arithmetic, circular rotation, Computer architecture, computerised signal processing, CORDIC processor array, digital filters, Digital filters, digital signal processing, Digital signal processing, digital signal processing chips, DSP algorithms, hyperbolic rotation, Iterative algorithms, iterative arithmetic computing algorithm, Iterative methods, linear transformations, matrix-based DSP algorithms, Signal processing algorithms, unified shift-and-add approach, Very large scale integration, VLSI, VLSI architectures},
	pages = {16--35},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/IUXD5A25/143467.html:text/html}
}

@article{hu_angle_1993,
	title = {An angle recoding method for {CORDIC} algorithm implementation},
	volume = {42},
	issn = {1557-9956},
	doi = {10.1109/12.192217},
	abstract = {The coordinate rotation digital computer (CORDIC), an iterative arithmetic algorithm for computing generalized vector rotations without performing multiplications, is discussed. For applications where the angle of rotation is known in advance, a method to speed up the execution of the CORDIC algorithm by reducing the total number of iterations is presented. This is accomplished by using a technique called angle recoding, which encodes the desired rotation angle as a linear combination of very few elementary rotation angles. Each of these elementary rotation angles takes one CORDIC iteration to compute. The fewer the number of elementary rotation angles, the fewer the number of iterations are required. A greedy algorithm which takes only O(n/sup 2/) operations is developed to perform CORDIC angle recoding. It is proven that this algorithm is able to reduce the total number of required elementary rotation angles by at least 50\% without affecting the computational accuracy.{\textless}{\textgreater}},
	number = {1},
	journal = {IEEE Transactions on Computers},
	author = {Hu, Y.H. and Naganathan, S.},
	month = jan,
	year = {1993},
	note = {Conference Name: IEEE Transactions on Computers},
	keywords = {angle recording method, Application software, Chirp, Computational modeling, coordinate rotation digital computer, CORDIC algorithm implementation, digital arithmetic, Digital arithmetic, Digital signal processing, elementary rotation angles, Fast Fourier transforms, generalized vector rotations, greedy algorithm, Greedy algorithms, Hardware, Iterative algorithms, iterative arithmetic algorithm, signal processing, Signal processing algorithms},
	pages = {99--102},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/PGBQSZN2/192217.html:text/html}
}

@misc{noauthor_high_nodate,
	title = {High performance rotation architectures based on the radix-4 {CORDIC} algorithm - {IEEE} {Journals} \& {Magazine}},
	url = {https://ieeexplore.ieee.org/document/609275},
	urldate = {2020-07-28},
	file = {High performance rotation architectures based on the radix-4 CORDIC algorithm - IEEE Journals & Magazine:/home/vladislove/Zotero/storage/JJLM44RE/609275.html:text/html}
}

@article{wang_hybrid_1997,
	title = {Hybrid {CORDIC} algorithms},
	volume = {46},
	issn = {1557-9956},
	doi = {10.1109/12.644295},
	abstract = {Each coordinate rotation digital computer iteration selects the rotation direction by analyzing the results of the previous iteration. In this paper, we introduce two arctangent radices and show that about 2/3 of the rotation directions can be derived in parallel without any error. Some architectures exploiting these strategies are proposed.},
	number = {11},
	journal = {IEEE Transactions on Computers},
	author = {Wang, S. and Piuri, V. and Wartzlander, E.E.},
	month = nov,
	year = {1997},
	note = {Conference Name: IEEE Transactions on Computers},
	keywords = {Algorithm design and analysis, arctangent radices, Complexity theory, Computer architecture, Computer errors, coordinate rotation digital computer iteration, CORDIC algorithm, CORDIC algorithms, CORDIC architecture, Delay, digital arithmetic, Digital arithmetic, elementary function, Equations, Givens transformation, Iterative algorithms, iterative methods, parallel, parallel algorithms, planary rotator, Throughput},
	pages = {1202--1207},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/5E65L7PA/644295.html:text/html;Submitted Version:/home/vladislove/Zotero/storage/D2M94UHH/Wang et al. - 1997 - Hybrid CORDIC algorithms.pdf:application/pdf}
}

@book{juang_areadelay_nodate,
	title = {Area/{Delay} {Efficient} {Recoding} {Methods} for {Parallel} {CORDIC} {Rotations}},
	isbn = {978-1-4244-0386-8 978-1-4244-0387-5},
	url = {https://www.infona.pl//resource/bwmeta1.element.ieee-art-000004145698},
	abstract = {In this paper, an area/delay efficient recoding method for parallel CORDIC (coordinate rotation digital computer) rotation algorithm is proposed. This recoding method can reduce the number of micro-rotation stages when the bit-width of input angle increases. The most critical path of the conventional CORDIC rotation lies in the determination of rotation directions, which depends on the sign of the remaining angle after each iteration. Our proposed method can also predict the rotation direction directly from the binary value of the initial input angle. Our proposed architectures have a more regular and simpler prediction scheme compared to previous approaches using non-parallel CORDIC rotation methods. The critical path delay of our proposed method is reduced compared with parallel CORDIC rotation method},
	language = {English},
	urldate = {2020-07-28},
	author = {Juang, Tso-Bing},
	doi = {10.1109/APCCAS.2006.342536},
	note = {Publication Title: APCCAS 2006 - 2006 IEEE Asia Pacific Conference on Circuits and Systems},
	file = {Snapshot:/home/vladislove/Zotero/storage/FMNMRREM/bwmeta1.element.html:text/html}
}

@misc{noauthor_redundant_nodate,
	title = {Redundant and on-line {CORDIC}: application to matrix triangularization and {SVD} - {IEEE} {Journals} \& {Magazine}},
	url = {https://ieeexplore.ieee.org/document/53594},
	urldate = {2020-07-28},
	file = {Redundant and on-line CORDIC\: application to matrix triangularization and SVD - IEEE Journals & Magazine:/home/vladislove/Zotero/storage/C92X52TH/53594.html:text/html}
}

@article{ercegovac_redundant_1990,
	title = {Redundant and on-line {CORDIC}: application to matrix triangularization and {SVD}},
	volume = {39},
	issn = {1557-9956},
	shorttitle = {Redundant and on-line {CORDIC}},
	doi = {10.1109/12.53594},
	abstract = {Several modifications to the CORDIC method of computing angles and performing rotations are presented: (1) the use of redundant (carry-free) addition instead of a conventional (carry-propagate) one; (2) a representation of angles in a decomposed form to reduce area and communication bandwidth; (3) the use of on-line addition (left-to-right, digit-serial addition) to replace shifters by delays; and (4) the use of online multiplication, square root, and division to compute scaling factors and perform the scaling operations. The modifications improve the speed and the area of CORDIC implementations. The proposed scheme uses efficiently floating-point representations. The application of the modified CORDIC method to matrix triangularization by Givens' rotations and to the computation of the singular value decomposition (SVD) are discussed.{\textless}{\textgreater}},
	number = {6},
	journal = {IEEE Transactions on Computers},
	author = {Ercegovac, M.D. and Lang, T.},
	month = jun,
	year = {1990},
	note = {Conference Name: IEEE Transactions on Computers},
	keywords = {angles, Arithmetic, Bandwidth, Broadcasting, Computer applications, Computer science, Delay, digit-serial addition, digital arithmetic, division, floating-point representations, Givens' rotations, Matrix decomposition, matrix triangularization, online CORDIC, online multiplication, redundant CORDIC, rotations, scaling factors, singular value decomposition, Singular value decomposition, square root, SVD, Throughput, Very large scale integration},
	pages = {725--740},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/DRRV6IMJ/53594.html:text/html}
}
