
@inproceedings{volder_cordic_1959,
	address = {San Francisco, California},
	series = {{IRE}-{AIEE}-{ACM} '59 ({Western})},
	title = {The {CORDIC} computing technique},
	isbn = {978-1-4503-7865-9},
	url = {https://doi.org/10.1145/1457838.1457886},
	doi = {10.1145/1457838.1457886},
	abstract = {The "Coordinate Rotation DIgital Computer" computing technique can be used to solve, in one computing operation and with equal speed, the relationships involved in plane coordinate rotation; conversion from rectangular to polar coordinates; multiplication; division; or the conversion between a binary - and a mixed-radix system.},
	urldate = {2020-02-25},
	booktitle = {Papers presented at the the {March} 3-5, 1959, western joint computer conference},
	publisher = {Association for Computing Machinery},
	author = {Volder, Jack},
	month = mar,
	year = {1959},
	pages = {257--261},
	file = {1959 The CORDIC Trigonometric Computing Technique.pdf:/home/vladislove/Zotero/storage/P2X3JTRY/1959 The CORDIC Trigonometric Computing Technique.pdf:application/pdf}
}

@inproceedings{hou_low_2019,
	title = {A {Low} {Latency} {Floating} {Point} {CORDIC} {Algorithm} for {Sin}/{Cosine} {Function}},
	doi = {10.1109/SIPROCESS.2019.8868623},
	abstract = {The CORDIC algorithm computes trigonometric functions just by shifting and adding. It is widely used due to low hardware complexity. However, the excessive number of iterations is a bottleneck for the optimization of the CORDIC. Based on IEEE754 double-precision floating-point, this paper uses 4-step iteration in each cycle, which improving precision and shortening the calculation period. With the range between the input angle Z and the x, y axis is greater than 2-6, while Z∈[-216,216], the accuracy of sine/cosine function is guaranteed within one ulp. The hardware architecture is coded using the Verilog language and integrated to derive its performance.},
	booktitle = {2019 {IEEE} 4th {International} {Conference} on {Signal} and {Image} {Processing} ({ICSIP})},
	author = {Hou, Nanxin and Wang, Mingjiang and Zou, Xiafeng and Liu, Ming},
	month = jul,
	year = {2019},
	note = {ISSN: null},
	keywords = {CORDIC, Image processing, trigonometric functions, Circuits and systems, Conferences, Digital arithmetic, Digital signal processing, double-precision, floating point arithmetic, floating-point, hardware complexity, IEEE transactions, IEEE754 double-precision floating-point, iterative methods, low latency, low latency floating point CORDIC algorithm, Manganese, sin/cosine},
	pages = {751--755},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/P8UPQEGG/8868623.html:text/html;Hou et al. - 2019 - A Low Latency Floating Point CORDIC Algorithm for .pdf:/home/vladislove/Zotero/storage/9C445I6S/Hou et al. - 2019 - A Low Latency Floating Point CORDIC Algorithm for .pdf:application/pdf}
}

@article{dhume_parameterizable_2012,
	title = {Parameterizable {CORDIC}-{Based} {Floating}-{Point} {Library} {Operations}},
	language = {en},
	author = {Dhume, Nikhil and Srinivasakannan, Ramakrishnan},
	year = {2012},
	pages = {18},
	file = {Dhume and Srinivasakannan - 2012 - Parameterizable CORDIC-Based Floating-Point Librar.pdf:/home/vladislove/Zotero/storage/NQ9BPZIJ/Dhume and Srinivasakannan - 2012 - Parameterizable CORDIC-Based Floating-Point Librar.pdf:application/pdf}
}

@inproceedings{walther_unified_1971,
	address = {Atlantic City, New Jersey},
	title = {A unified algorithm for elementary functions},
	url = {http://portal.acm.org/citation.cfm?doid=1478786.1478840},
	doi = {10.1145/1478786.1478840},
	abstract = {This paper describes a single unified algorithm for the calculation of elementary functions including multiplication, division, sin, cos, tan, arctan, sinh, cosh, tanh, arctanh, In, exp and square-root. The basis for the algorithm is coordinate rotation in a linear, circular, or hyperbolic coordinate system depending on which function is to be calculated. The only operations required are shifting, adding, subtracting and the recall of prestored constants. The limited domain of convergence of the algorithm is calculated, leading to a discussion of the modifications required to extend the domain for floating point calculations.},
	language = {en},
	urldate = {2020-02-25},
	booktitle = {Proceedings of the {May} 18-20, 1971, spring joint computer conference on - {AFIPS} '71 ({Spring})},
	publisher = {ACM Press},
	author = {Walther, J. S.},
	year = {1971},
	pages = {379},
	file = {Walther - 1971 - A unified algorithm for elementary functions.pdf:/home/vladislove/Zotero/storage/B2K5QNTL/Walther - 1971 - A unified algorithm for elementary functions.pdf:application/pdf}
}

@article{meher_50_2009,
	title = {50 {Years} of {CORDIC}: {Algorithms}, {Architectures}, and {Applications}},
	volume = {56},
	issn = {1558-0806},
	shorttitle = {50 {Years} of {CORDIC}},
	doi = {10.1109/TCSI.2009.2025803},
	abstract = {Year 2009 marks the completion of 50 years of the invention of CORDIC (coordinate rotation digital computer) by Jack E. Volder. The beauty of CORDIC lies in the fact that by simple shift-add operations, it can perform several computing tasks such as the calculation of trigonometric, hyperbolic and logarithmic functions, real and complex multiplications, division, square-root, solution of linear systems, eigenvalue estimation, singular value decomposition, QR factorization and many others. As a consequence, CORDIC has been utilized for applications in diverse areas such as signal and image processing, communication systems, robotics and 3-D graphics apart from general scientific and technical computation. In this article, we present a brief overview of the key developments in the CORDIC algorithms and architectures along with their potential and upcoming applications.},
	number = {9},
	journal = {IEEE Transactions on Circuits and Systems I: Regular Papers},
	author = {Meher, Pramod K. and Valls, Javier and Juang, Tso-Bing and Sridharan, K. and Maharatna, Koushik},
	month = sep,
	year = {2009},
	note = {Conference Name: IEEE Transactions on Circuits and Systems I: Regular Papers},
	keywords = {Application software, Arithmetic circuits, Computer architecture, coordinate rotation digital computer, CORDIC, CORDIC algorithms, digital arithmetic, digital signal processing chip, eigenvalue estimation, Eigenvalues and eigenfunctions, Graphics, hyperbolic functions, Image processing, Lifting equipment, linear systems, Linear systems, logarithmic functions, QR factorization, Robot kinematics, shift-add operations, signal processing, Signal processing, singular value decomposition, Singular value decomposition, trigonometric functions, VLSI},
	pages = {1893--1907},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/9G9TJDDU/5089431.html:text/html;Accepted Version:/home/vladislove/Zotero/storage/YZQS8PVH/Meher et al. - 2009 - 50 Years of CORDIC Algorithms, Architectures, and.pdf:application/pdf}
}

@article{nguyen_low-resource_2015,
	title = {Low-resource low-latency hybrid adaptive {CORDIC} with floating-point precision},
	volume = {12},
	issn = {1349-2543},
	url = {https://www.jstage.jst.go.jp/article/elex/12/9/12_12.20150258/_article},
	doi = {10.1587/elex.12.20150258},
	abstract = {Despite being proposed since more than 50 years ago, COordinate Rotation DIgital Computer (CORDIC) is still one of the most effective algorithms for elementary function calculation so far. Original CORDIC, however, suffers high latency due to its nature of unvarying number of rotations. As a result, a low-latency hybrid adaptive (HA) CORDIC is proposed in this paper. Firstly, adaptive angle selection decreases total iterations up to 50\% with respect to higher accuracy of results. Secondly, hybrid architecture including ﬁxed-point input and ﬂoating-point output reduces the total hardware utilization and enhances the dynamic range of ﬁnal results. Lastly, parallel and pipeline processing together with resource sharing technique allow the design to operate fully at 175.7 MHz with low resource consumption — 1,139 LUTs and 489 registers.},
	language = {en},
	number = {9},
	urldate = {2020-07-01},
	journal = {IEICE Electronics Express},
	author = {Nguyen, Hong-Thu and Nguyen, Xuan-Thuan and Hoang, Trong-Thuc and Le, Duc-Hung and Pham, Cong-Kha},
	year = {2015},
	pages = {20150258--20150258},
	file = {Nguyen et al. - 2015 - Low-resource low-latency hybrid adaptive CORDIC wi.pdf:/home/vladislove/Zotero/storage/8RTIXTCR/Nguyen et al. - 2015 - Low-resource low-latency hybrid adaptive CORDIC wi.pdf:application/pdf}
}

@inproceedings{de_lange_optimal_1988,
	title = {An optimal floating-point pipeline {CMOS} {CORDIC} processor},
	doi = {10.1109/ISCAS.1988.15343},
	abstract = {The authors present a VLSI CORDIC processor which is obtained using the hierarchical and interactive design methodology on which the DELFT VLSI synthesis is built. They also present an optimized (floating-point) CORDIC algorithm, the hierarchical mapping of this algorithm on a floating-point architecture, the design method, the layout, the chip, and its performance. Algorithm, architecture, and layout are parameterized with respect to the accuracy of rotation angles and vectors. The CORDIC chip is a pipeline that performs 10/sup 7/ plane rotations/s and is mounted in a 144-pin package. The vector entries are 21 bit floating-point numbers (16-bit mantissa and 5 bit exponent in twos complement).{\textless}{\textgreater}},
	booktitle = {1988., {IEEE} {International} {Symposium} on {Circuits} and {Systems}},
	author = {de Lange, A.A.J. and van der Hoeven, A.J. and Deprettere, E.F. and Bu, J.},
	month = jun,
	year = {1988},
	keywords = {digital arithmetic, VLSI, Algorithm design and analysis, Pipelines, Signal processing algorithms, 144-pin package, Analytical models, circuit layout CAD, Circuit simulation, CMOS integrated circuits, CMOS process, DELFT VLSI synthesis, Design methodology, floating-point architecture, floating-point pipeline CMOS CORDIC processor, hierarchical design, interactive design, layout, Macrocell networks, microprocessor chips, pipeline processing, rotation angles, Silicon compiler, Very large scale integration, VLSI CORDIC processor},
	pages = {2043--2047 vol.3},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/QL6RBWLW/15343.html:text/html}
}

@inproceedings{hekstra_floating_1993,
	title = {Floating point {Cordic}},
	doi = {10.1109/ARITH.1993.378100},
	abstract = {A full-precision floating-point Cordic algorithm, suitable for the implementation of a word-serial Cordic architecture, is presented. The extension to existing block floating-point Cordic algorithms is in a floating-point representation for the angle. The angle is represented as a combination of exponent, microrotation bits, and two bits to indicate prerotations over /spl pi/2 and /spl pi/ radians. Representing floating-point angles in this fashion maintains the accuracy that is present in the input data, which makes it ideally suited for implementing a floating-point Givens operator.{\textless}{\textgreater}},
	booktitle = {Proceedings of {IEEE} 11th {Symposium} on {Computer} {Arithmetic}},
	author = {Hekstra, G.J. and Deprettere, E.F.A.},
	month = jun,
	year = {1993},
	keywords = {Computer architecture, floating point arithmetic, floating-point, floating-point representation, Hardware, Vectors, Equations, Clocks, Cordic algorithms, Floating-point arithmetic, full-precision, Givens operator},
	pages = {130--137},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/5PF8LETD/378100.html:text/html}
}

@misc{leibson_9100_2005,
	title = {The 9100 {Part} 2},
	url = {http://www.hp9825.com/html/the_9100_part_2.html},
	urldate = {2020-07-02},
	author = {Leibson, Steve},
	year = {2005},
	file = {The 9100 Part 2:/home/vladislove/Zotero/storage/YSIL625F/the_9100_part_2.html:text/html}
}

@article{schelin_calculator_1983,
	title = {Calculator {Function} {Approximation}},
	volume = {90},
	issn = {0002-9890},
	url = {https://doi.org/10.1080/00029890.1983.11971220},
	doi = {10.1080/00029890.1983.11971220},
	number = {5},
	urldate = {2020-07-02},
	journal = {The American Mathematical Monthly},
	author = {Schelin, Charles W.},
	month = may,
	year = {1983},
	note = {Publisher: Taylor \& Francis
\_eprint: https://doi.org/10.1080/00029890.1983.11971220},
	pages = {317--325},
	file = {Snapshot:/home/vladislove/Zotero/storage/TBL5ZGGG/00029890.1983.html:text/html}
}

@inproceedings{zhou_double_2008,
	title = {Double {Precision} {Hybrid}-{Mode} {Floating}-{Point} {FPGA} {CORDIC} {Co}-processor},
	doi = {10.1109/HPCC.2008.14},
	abstract = {FPGA chips have become a promising option for accelerating scientific applications, which involve many floating-point transcendental functions, such as sin, log, exp, sqrt and etc. In this paper, we present a 64-bit ANSI/IEEE floating-point CORDIC co-processor on FPGA, providing all known CORDIC functions. And there is no 64-bit CORDIC implementation on FPGA known to us. We propose a hybrid-mode CORDIC algorithm, combining hybrid rotation angle methods with argument reduction algorithm to reduce hardware area usage and meanwhile keep unlimited convergence domain for any floating-point inputs of the functions. Our hybrid-mode CORDIC co-processor is organized into three phases, argument reduction, CORDIC calculation and normalization with 69 pipeline stages for FPGA implementation. The synthesis results show the clock frequency can reach 173 MHz on Xilinx Virtex5 FPGA. Comparing to general-purpose microprocessor in three scientific program kernels, the CORDIC co-processor can achieve a maximum speedup of 49.3 times, 28.7 times in average.},
	booktitle = {2008 10th {IEEE} {International} {Conference} on {High} {Performance} {Computing} and {Communications}},
	author = {Zhou, Jie and Dou, Yong and Lei, Yuanwu and Xu, Jinbo and Dong, Yazhuo},
	month = sep,
	year = {2008},
	keywords = {CORDIC, floating point arithmetic, floating-point, Convergence, Hardware, Algorithm design and analysis, argument reduction algorithm, clock frequency, coprocessors, double precision, double precision hybrid-mode floating-point FPGA, Equations, field programmable gate arrays, Field programmable gate arrays, floating-point CORDIC co-processor, floating-point transcendental functions, FPGA, hybrid-mode, Mathematical model, Pipelines, Xilinx Virtex5 FPGA},
	pages = {182--189},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/TNIARNL8/4637696.html:text/html}
}

@article{parker_abstract_2011,
	title = {Abstract – {Floating} {Point}},
	url = {https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/wp/designcon2011-floating-point-design-flow.pdf},
	abstract = {Floating-point processing utilizes a format defined in IEEE754, and is supported by microprocessor architectures.However, the IEEE754 format is inefficient to implement in hardware, andfloating-pointprocessingis not supported in VHDL or Verilog. Newer versions, such as SystemVerilog, allowfloating-pointvariables, but industry-standard synthesis tools do not support floating-pointtechnology.This paper describesa new approach which efficiently implementsfloating-point data processing in hardware architectures, specifically FPGAs. This allowsfor extremely high rates of floating-point processing, of at least1 TeraFLOPSin a single FPGA die, and with significantly better power efficiency than the microprocessor-based alternatives.},
	language = {en},
	journal = {DesignCon 2011},
	author = {Parker, Michael},
	year = {2011},
	pages = {15},
	file = {Abstract – Floating Point.pdf:/home/vladislove/Zotero/storage/BUTM4NQD/Abstract – Floating Point.pdf:application/pdf}
}
