
@inproceedings{volder_cordic_1959,
	address = {San Francisco, California},
	series = {{IRE}-{AIEE}-{ACM} '59 ({Western})},
	title = {The {CORDIC} computing technique},
	isbn = {978-1-4503-7865-9},
	url = {https://doi.org/10.1145/1457838.1457886},
	doi = {10.1145/1457838.1457886},
	abstract = {The "Coordinate Rotation DIgital Computer" computing technique can be used to solve, in one computing operation and with equal speed, the relationships involved in plane coordinate rotation; conversion from rectangular to polar coordinates; multiplication; division; or the conversion between a binary - and a mixed-radix system.},
	urldate = {2020-02-25},
	booktitle = {Papers presented at the the {March} 3-5, 1959, western joint computer conference},
	publisher = {Association for Computing Machinery},
	author = {Volder, Jack},
	month = mar,
	year = {1959},
	pages = {257--261},
	file = {1959 The CORDIC Trigonometric Computing Technique.pdf:/home/vladislove/Zotero/storage/P2X3JTRY/1959 The CORDIC Trigonometric Computing Technique.pdf:application/pdf}
}

@inproceedings{hou_low_2019,
	title = {A {Low} {Latency} {Floating} {Point} {CORDIC} {Algorithm} for {Sin}/{Cosine} {Function}},
	doi = {10.1109/SIPROCESS.2019.8868623},
	abstract = {The CORDIC algorithm computes trigonometric functions just by shifting and adding. It is widely used due to low hardware complexity. However, the excessive number of iterations is a bottleneck for the optimization of the CORDIC. Based on IEEE754 double-precision floating-point, this paper uses 4-step iteration in each cycle, which improving precision and shortening the calculation period. With the range between the input angle Z and the x, y axis is greater than 2-6, while Z∈[-216,216], the accuracy of sine/cosine function is guaranteed within one ulp. The hardware architecture is coded using the Verilog language and integrated to derive its performance.},
	booktitle = {2019 {IEEE} 4th {International} {Conference} on {Signal} and {Image} {Processing} ({ICSIP})},
	author = {Hou, Nanxin and Wang, Mingjiang and Zou, Xiafeng and Liu, Ming},
	month = jul,
	year = {2019},
	note = {ISSN: null},
	keywords = {CORDIC, Image processing, trigonometric functions, Circuits and systems, Conferences, Digital arithmetic, Digital signal processing, double-precision, floating point arithmetic, floating-point, hardware complexity, IEEE transactions, IEEE754 double-precision floating-point, iterative methods, low latency, low latency floating point CORDIC algorithm, Manganese, sin/cosine},
	pages = {751--755},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/P8UPQEGG/8868623.html:text/html;Hou et al. - 2019 - A Low Latency Floating Point CORDIC Algorithm for .pdf:/home/vladislove/Zotero/storage/9C445I6S/Hou et al. - 2019 - A Low Latency Floating Point CORDIC Algorithm for .pdf:application/pdf}
}

@article{dhume_parameterizable_2012,
	title = {Parameterizable {CORDIC}-{Based} {Floating}-{Point} {Library} {Operations}},
	language = {en},
	author = {Dhume, Nikhil and Srinivasakannan, Ramakrishnan},
	year = {2012},
	pages = {18},
	file = {Dhume and Srinivasakannan - 2012 - Parameterizable CORDIC-Based Floating-Point Librar.pdf:/home/vladislove/Zotero/storage/NQ9BPZIJ/Dhume and Srinivasakannan - 2012 - Parameterizable CORDIC-Based Floating-Point Librar.pdf:application/pdf}
}

@inproceedings{walther_unified_1971,
	address = {Atlantic City, New Jersey},
	title = {A unified algorithm for elementary functions},
	url = {http://portal.acm.org/citation.cfm?doid=1478786.1478840},
	doi = {10.1145/1478786.1478840},
	abstract = {This paper describes a single unified algorithm for the calculation of elementary functions including multiplication, division, sin, cos, tan, arctan, sinh, cosh, tanh, arctanh, In, exp and square-root. The basis for the algorithm is coordinate rotation in a linear, circular, or hyperbolic coordinate system depending on which function is to be calculated. The only operations required are shifting, adding, subtracting and the recall of prestored constants. The limited domain of convergence of the algorithm is calculated, leading to a discussion of the modifications required to extend the domain for floating point calculations.},
	language = {en},
	urldate = {2020-02-25},
	booktitle = {Proceedings of the {May} 18-20, 1971, spring joint computer conference on - {AFIPS} '71 ({Spring})},
	publisher = {ACM Press},
	author = {Walther, J. S.},
	year = {1971},
	pages = {379},
	file = {Walther - 1971 - A unified algorithm for elementary functions.pdf:/home/vladislove/Zotero/storage/B2K5QNTL/Walther - 1971 - A unified algorithm for elementary functions.pdf:application/pdf}
}

@article{meher_50_2009,
	title = {50 {Years} of {CORDIC}: {Algorithms}, {Architectures}, and {Applications}},
	volume = {56},
	issn = {1558-0806},
	shorttitle = {50 {Years} of {CORDIC}},
	doi = {10.1109/TCSI.2009.2025803},
	abstract = {Year 2009 marks the completion of 50 years of the invention of CORDIC (coordinate rotation digital computer) by Jack E. Volder. The beauty of CORDIC lies in the fact that by simple shift-add operations, it can perform several computing tasks such as the calculation of trigonometric, hyperbolic and logarithmic functions, real and complex multiplications, division, square-root, solution of linear systems, eigenvalue estimation, singular value decomposition, QR factorization and many others. As a consequence, CORDIC has been utilized for applications in diverse areas such as signal and image processing, communication systems, robotics and 3-D graphics apart from general scientific and technical computation. In this article, we present a brief overview of the key developments in the CORDIC algorithms and architectures along with their potential and upcoming applications.},
	number = {9},
	journal = {IEEE Transactions on Circuits and Systems I: Regular Papers},
	author = {Meher, Pramod K. and Valls, Javier and Juang, Tso-Bing and Sridharan, K. and Maharatna, Koushik},
	month = sep,
	year = {2009},
	note = {Conference Name: IEEE Transactions on Circuits and Systems I: Regular Papers},
	keywords = {Application software, Arithmetic circuits, Computer architecture, coordinate rotation digital computer, CORDIC, CORDIC algorithms, digital arithmetic, digital signal processing chip, eigenvalue estimation, Eigenvalues and eigenfunctions, Graphics, hyperbolic functions, Image processing, Lifting equipment, linear systems, Linear systems, logarithmic functions, QR factorization, Robot kinematics, shift-add operations, signal processing, Signal processing, singular value decomposition, Singular value decomposition, trigonometric functions, VLSI},
	pages = {1893--1907},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/9G9TJDDU/5089431.html:text/html;Accepted Version:/home/vladislove/Zotero/storage/YZQS8PVH/Meher et al. - 2009 - 50 Years of CORDIC Algorithms, Architectures, and.pdf:application/pdf}
}

@article{nguyen_low-resource_2015,
	title = {Low-resource low-latency hybrid adaptive {CORDIC} with floating-point precision},
	volume = {12},
	issn = {1349-2543},
	url = {https://www.jstage.jst.go.jp/article/elex/12/9/12_12.20150258/_article},
	doi = {10.1587/elex.12.20150258},
	abstract = {Despite being proposed since more than 50 years ago, COordinate Rotation DIgital Computer (CORDIC) is still one of the most effective algorithms for elementary function calculation so far. Original CORDIC, however, suffers high latency due to its nature of unvarying number of rotations. As a result, a low-latency hybrid adaptive (HA) CORDIC is proposed in this paper. Firstly, adaptive angle selection decreases total iterations up to 50\% with respect to higher accuracy of results. Secondly, hybrid architecture including ﬁxed-point input and ﬂoating-point output reduces the total hardware utilization and enhances the dynamic range of ﬁnal results. Lastly, parallel and pipeline processing together with resource sharing technique allow the design to operate fully at 175.7 MHz with low resource consumption — 1,139 LUTs and 489 registers.},
	language = {en},
	number = {9},
	urldate = {2020-07-01},
	journal = {IEICE Electronics Express},
	author = {Nguyen, Hong-Thu and Nguyen, Xuan-Thuan and Hoang, Trong-Thuc and Le, Duc-Hung and Pham, Cong-Kha},
	year = {2015},
	pages = {20150258--20150258},
	file = {Nguyen et al. - 2015 - Low-resource low-latency hybrid adaptive CORDIC wi.pdf:/home/vladislove/Zotero/storage/8RTIXTCR/Nguyen et al. - 2015 - Low-resource low-latency hybrid adaptive CORDIC wi.pdf:application/pdf}
}

@inproceedings{de_lange_optimal_1988,
	title = {An optimal floating-point pipeline {CMOS} {CORDIC} processor},
	doi = {10.1109/ISCAS.1988.15343},
	abstract = {The authors present a VLSI CORDIC processor which is obtained using the hierarchical and interactive design methodology on which the DELFT VLSI synthesis is built. They also present an optimized (floating-point) CORDIC algorithm, the hierarchical mapping of this algorithm on a floating-point architecture, the design method, the layout, the chip, and its performance. Algorithm, architecture, and layout are parameterized with respect to the accuracy of rotation angles and vectors. The CORDIC chip is a pipeline that performs 10/sup 7/ plane rotations/s and is mounted in a 144-pin package. The vector entries are 21 bit floating-point numbers (16-bit mantissa and 5 bit exponent in twos complement).{\textless}{\textgreater}},
	booktitle = {1988., {IEEE} {International} {Symposium} on {Circuits} and {Systems}},
	author = {de Lange, A.A.J. and van der Hoeven, A.J. and Deprettere, E.F. and Bu, J.},
	month = jun,
	year = {1988},
	keywords = {digital arithmetic, VLSI, Algorithm design and analysis, Pipelines, Signal processing algorithms, 144-pin package, Analytical models, circuit layout CAD, Circuit simulation, CMOS integrated circuits, CMOS process, DELFT VLSI synthesis, Design methodology, floating-point architecture, floating-point pipeline CMOS CORDIC processor, hierarchical design, interactive design, layout, Macrocell networks, microprocessor chips, pipeline processing, rotation angles, Silicon compiler, Very large scale integration, VLSI CORDIC processor},
	pages = {2043--2047 vol.3},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/QL6RBWLW/15343.html:text/html}
}

@inproceedings{hekstra_floating_1993,
	title = {Floating point {Cordic}},
	doi = {10.1109/ARITH.1993.378100},
	abstract = {A full-precision floating-point Cordic algorithm, suitable for the implementation of a word-serial Cordic architecture, is presented. The extension to existing block floating-point Cordic algorithms is in a floating-point representation for the angle. The angle is represented as a combination of exponent, microrotation bits, and two bits to indicate prerotations over /spl pi/2 and /spl pi/ radians. Representing floating-point angles in this fashion maintains the accuracy that is present in the input data, which makes it ideally suited for implementing a floating-point Givens operator.{\textless}{\textgreater}},
	booktitle = {Proceedings of {IEEE} 11th {Symposium} on {Computer} {Arithmetic}},
	author = {Hekstra, G.J. and Deprettere, E.F.A.},
	month = jun,
	year = {1993},
	keywords = {Computer architecture, floating point arithmetic, floating-point, floating-point representation, Hardware, Vectors, Equations, Clocks, Cordic algorithms, Floating-point arithmetic, full-precision, Givens operator},
	pages = {130--137},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/5PF8LETD/378100.html:text/html}
}

@inproceedings{yeshwanth_high-speed_2018,
	title = {High-{Speed} {Single} {Precision} {Floating} {Point} {Multiplier} using {CORDIC} {Algorithm}},
	doi = {10.1109/ICEECCOT43722.2018.9001506},
	abstract = {Floating point arithmetic has paramount necessity in computer systems. Floating point multiplier is appreciably used in numerous applications which yearn for speed. Generally, floating point multiplier requires 23×23 mantissa multiplication and 8-bit exponent addition. Thus, delay of the mantissa multiplication plays a crucial role in boosting the speed. In this paper, the prime proposal is to increase the speed of the single precision floating point multiplier by implementing mantissa multiplication using CORDIC algorithm and exponent addition using Kogge-Stone adder which results in increasing the speed by several folds. Further, the performance of floating point multiplier using CORDIC algorithm and VEDIC multiplier is contemplated in terms of area, delay and power. Floating point multiplier was designed in VHDL using XILINX ISE 14.7 and implemented in XILINX Spartan 6e board. The proposed idea has shown better performance in terms of speed.},
	booktitle = {2018 {International} {Conference} on {Electrical}, {Electronics}, {Communication}, {Computer}, and {Optimization} {Techniques} ({ICEECCOT})},
	author = {Yeshwanth, Balaji and Venkatesh, Vutukuri and Akhil, Repala},
	month = dec,
	year = {2018},
	keywords = {Computer architecture, floating point arithmetic, Adders, CORDIC algorithm, Pipelines, Signal processing algorithms, Clocks, adders, Delays, floating point multiplier, hardware description languages, high-speed single precision, Kogge-Stone adder, logic design, mantissa multiplication, multiplying circuits, Parallel Prefixadder, Routing, Single precision floating point multiplier, Vedic multiplier, VEDIC multiplier, VHDL, XILINX ISE 14.7, XILINX Spartan 6e board},
	pages = {135--141},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/THHRTWM6/9001506.html:text/html}
}

@misc{leibson_9100_2005,
	title = {The 9100 {Part} 2},
	url = {http://www.hp9825.com/html/the_9100_part_2.html},
	urldate = {2020-07-02},
	author = {Leibson, Steve},
	year = {2005},
	file = {The 9100 Part 2:/home/vladislove/Zotero/storage/YSIL625F/the_9100_part_2.html:text/html}
}

@article{schelin_calculator_1983,
	title = {Calculator {Function} {Approximation}},
	volume = {90},
	issn = {0002-9890},
	url = {https://doi.org/10.1080/00029890.1983.11971220},
	doi = {10.1080/00029890.1983.11971220},
	number = {5},
	urldate = {2020-07-02},
	journal = {The American Mathematical Monthly},
	author = {Schelin, Charles W.},
	month = may,
	year = {1983},
	note = {Publisher: Taylor \& Francis
\_eprint: https://doi.org/10.1080/00029890.1983.11971220},
	pages = {317--325},
	file = {Snapshot:/home/vladislove/Zotero/storage/TBL5ZGGG/00029890.1983.html:text/html}
}

@article{wang_gh_2020,
	title = {{GH} {CORDIC}-{Based} {Architecture} for {Computing} \${N}\$ th {Root} of {Single}-{Precision} {Floating}-{Point} {Number}},
	volume = {28},
	issn = {1557-9999},
	doi = {10.1109/TVLSI.2019.2959847},
	abstract = {This article presents hardware implementation for computing arbitrary roots of a single-precision floating-point number. The proposed architecture is based on Generalized Hyperbolic COordinate Rotation Digital Computer (GH CORDIC) algorithm. Benefiting from the wide range of floating-point numbers, our design is able to compute the Nth root (N ≥ 2) of a single-precision floating-point number. After implementation, a series of tests have been carried out, including accuracy, power consumption, performance comparison, and so on. Simulation results indicate that our proposed method is capable of calculating the Nth root of a positive single-precision floating-point number with a relative error of 10-7 approximately and promises an error-flatten performance. Synthesized results from a design compiler under TSMC-40-nm CMOS technology show that our design can achieve the highest frequency of 2.38 GHz with the area consumption of 140894.44 μm2 and power consumption of 86.9573 mW.},
	number = {4},
	journal = {IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
	author = {Wang, Yuxuan and Luo, Yuanyong and Wang, Zhongfeng and Shen, Qinghong and Pan, Hongbing},
	month = apr,
	year = {2020},
	note = {Conference Name: IEEE Transactions on Very Large Scale Integration (VLSI) Systems},
	keywords = {Computer architecture, Graphics, floating point arithmetic, Hardware, Field programmable gate arrays, Mathematical model, CMOS integrated circuits, Very large scale integration, Binary floating point (BFP), COordinate Rotation Digital Computer (CORDIC), frequency 2.38 GHz, Generalized Hyperbolic COordinate Rotation Digital Computer algorithm, GH CORDIC-based architecture, high speed, Nth root, positive single-precision floating-point number, power 86.9573 mW, Standards},
	pages = {864--875},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/AAMCW6RE/8948355.html:text/html}
}

@inproceedings{zhou_double_2008,
	title = {Double {Precision} {Hybrid}-{Mode} {Floating}-{Point} {FPGA} {CORDIC} {Co}-processor},
	doi = {10.1109/HPCC.2008.14},
	abstract = {FPGA chips have become a promising option for accelerating scientific applications, which involve many floating-point transcendental functions, such as sin, log, exp, sqrt and etc. In this paper, we present a 64-bit ANSI/IEEE floating-point CORDIC co-processor on FPGA, providing all known CORDIC functions. And there is no 64-bit CORDIC implementation on FPGA known to us. We propose a hybrid-mode CORDIC algorithm, combining hybrid rotation angle methods with argument reduction algorithm to reduce hardware area usage and meanwhile keep unlimited convergence domain for any floating-point inputs of the functions. Our hybrid-mode CORDIC co-processor is organized into three phases, argument reduction, CORDIC calculation and normalization with 69 pipeline stages for FPGA implementation. The synthesis results show the clock frequency can reach 173 MHz on Xilinx Virtex5 FPGA. Comparing to general-purpose microprocessor in three scientific program kernels, the CORDIC co-processor can achieve a maximum speedup of 49.3 times, 28.7 times in average.},
	booktitle = {2008 10th {IEEE} {International} {Conference} on {High} {Performance} {Computing} and {Communications}},
	author = {Zhou, Jie and Dou, Yong and Lei, Yuanwu and Xu, Jinbo and Dong, Yazhuo},
	month = sep,
	year = {2008},
	keywords = {CORDIC, floating point arithmetic, floating-point, Convergence, Hardware, Algorithm design and analysis, argument reduction algorithm, clock frequency, coprocessors, double precision, double precision hybrid-mode floating-point FPGA, Equations, field programmable gate arrays, Field programmable gate arrays, floating-point CORDIC co-processor, floating-point transcendental functions, FPGA, hybrid-mode, Mathematical model, Pipelines, Xilinx Virtex5 FPGA},
	pages = {182--189},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/TNIARNL8/4637696.html:text/html}
}

@inproceedings{evangelista_fully-pipelined_2018,
	title = {Fully-pipelined {CORDIC}-based {FPGA} {Realization} for a 3-{DOF} {Hexapod}-{Leg} {Inverse} {Kinematics} {Calculation}},
	doi = {10.1109/WRC-SARA.2018.8584238},
	abstract = {This paper presents a CORDIC-based FPGA realization for a 3-DOF hexapod-leg inverse kinematics calculation. This architecture design proposal is approached first by an inverse kinematics equations analysis and how are these adapted to design an architecture scheme based on CORDIC operations. After that, a 3-DOF hexapod-leg working area is analyzed to get the CORDIC convergence requirements. Subsequently, we designed an iterative 32-bit floating point CORDIC entity that met the convergence and accuracy requirements. Moreover, a fully pipelined VLSI architecture is designed, respective hardware and clock signaling considerations are described in order to achieve high frequency and throughput. Finally, both results proposed and obtained through the kinematic calculations software, which included the angles equations used to calculate precision, hardware requirements and processing speed.},
	booktitle = {2018 {WRC} {Symposium} on {Advanced} {Robotics} and {Automation} ({WRC} {SARA})},
	author = {Evangelista, Guillermo and Olaya, Carlos and Rodríguez, Erick},
	month = aug,
	year = {2018},
	keywords = {CORDIC, VLSI, floating point arithmetic, Convergence, Hardware, field programmable gate arrays, FPGA, pipeline arithmetic, Read only memory, pipeline processing, Clocks, architecture design proposal, architecture scheme, CORDIC convergence requirements, CORDIC operations, CORDIC-based FPGA realization, fully pipelined VLSI architecture, hexapod-leg inverse kinematics calculation, hexapod-leg working area, hexapod-leg., inverse kinematics equations analysis, iterative 32-bit floating point CORDIC entity, kinematic calculations software, Kinematics, kinematics calculation, legged locomotion, Legged locomotion, robot kinematics, word length 32 bit},
	pages = {237--242},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/ZCPMEAMU/8584238.html:text/html}
}

@article{parker_abstract_2011,
	title = {Abstract – {Floating} {Point}},
	url = {https://www.intel.com/content/dam/www/programmable/us/en/pdfs/literature/wp/designcon2011-floating-point-design-flow.pdf},
	abstract = {Floating-point processing utilizes a format defined in IEEE754, and is supported by microprocessor architectures.However, the IEEE754 format is inefficient to implement in hardware, andfloating-pointprocessingis not supported in VHDL or Verilog. Newer versions, such as SystemVerilog, allowfloating-pointvariables, but industry-standard synthesis tools do not support floating-pointtechnology.This paper describesa new approach which efficiently implementsfloating-point data processing in hardware architectures, specifically FPGAs. This allowsfor extremely high rates of floating-point processing, of at least1 TeraFLOPSin a single FPGA die, and with significantly better power efficiency than the microprocessor-based alternatives.},
	language = {en},
	journal = {DesignCon 2011},
	author = {Parker, Michael},
	year = {2011},
	pages = {15},
	file = {Abstract – Floating Point.pdf:/home/vladislove/Zotero/storage/BUTM4NQD/Abstract – Floating Point.pdf:application/pdf}
}

@article{tso-bing_juang_para-cordic_2004,
	title = {Para-{CORDIC}: parallel {CORDIC} rotation algorithm},
	volume = {51},
	issn = {1558-0806},
	shorttitle = {Para-{CORDIC}},
	doi = {10.1109/TCSI.2004.832734},
	abstract = {In this paper, the parallel COrdinate Rotation DIgital Computer (CORDIC) rotation algorithm in circular and hyperbolic coordinate is proposed. The most critical path of the conventional CORDIC rotation lies in the determination of rotation directions, which depends on the sign of the remaining angle after each iteration. Using the binary-to-bipolar recoding (BBR) and microrotation angle recoding techniques, the rotation directions can be predicted directly from the binary value of the initial input angle. The original sequential CORDIC rotations can be divided into two phases where the rotations in each phase can be executed in parallel. Our proposed architectures have a more regular and simpler prediction scheme compared to previous approaches. The critical path delay is reduced since the concurrently predicted rotations can be combined using multioperand carry-save addition structures.},
	number = {8},
	journal = {IEEE Transactions on Circuits and Systems I: Regular Papers},
	author = {Tso-Bing Juang and Shen-Fu Hsiao and Ming-Yu Tsai},
	month = aug,
	year = {2004},
	note = {Conference Name: IEEE Transactions on Circuits and Systems I: Regular Papers},
	keywords = {Computer architecture, coordinate rotation digital computer, digital arithmetic, Vectors, Signal processing algorithms, binary value, binary-to-bipolar recoding, circular coordinate, Computer science, Concurrent computing, critical path delay, Delay, hyperbolic coordinate, initial input angle, Iterative algorithms, Matrix decomposition, microrotation angle recoding, multioperand carry-save addition structures, para-CORDIC, parallel algorithms, parallel architectures, parallel CORDIC rotation algorithm, rotation directions, Two dimensional displays},
	pages = {1515--1524},
	file = {IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/MGZHLY9Z/1323204.html:text/html}
}

@article{fang_generation_2019,
	title = {Generation scheme of chirp scaling phase functions based on floating-point {CORDIC} processor},
	volume = {2019},
	issn = {2051-3305},
	doi = {10.1049/joe.2019.0623},
	abstract = {This study presents a chirp scaling (CS) phase function generation scheme based on CORDIC algorithm, it adopts single precision floating-point CORDIC processor to implement a variety of non-linear operations which are involved in CS synthetic aperture radar (SAR) imaging algorithm. We extend the range of convergence of CORDIC algorithm and reduce the data width in rotation unit module by adopting a hardware resource reduction scheme. We also adopt a unified CORDIC processor to achieve square root, multiplication, and division operation, which can substitute multiple single-function processors and simplify the complicate arithmetic in CS algorithm. As a proof of concept, we verify the performance of the proposed design scheme on Xilinx XC7VX690T FPGA platform, it is also applied to 16384 × 16384 points target SAR imaging system, the FPGA resource occupancy of the CS phase function generation module demonstrates that the usage of CORDIC processor can effectively save the consumption of hardware resources, and the maximum operating frequency is acceptable. The accuracy of phase functions can satisfy the engineering requirements.},
	number = {21},
	journal = {The Journal of Engineering},
	author = {Fang, Linlin and Xie, Yizhuang and Li, Bingyi and Chen, He},
	year = {2019},
	note = {Conference Name: The Journal of Engineering},
	keywords = {floating point arithmetic, CORDIC algorithm, field programmable gate arrays, logic design, chirp scaling phase function generation scheme, chirp scaling phase functions, CS synthetic aperture radar imaging algorithm, division operation, function generators, hardware resource reduction scheme, multiplication operation, nonlinear operations, radar imaging, SAR imaging system, single precision floating-point CORDIC processor, square root operation, synthetic aperture radar, unified CORDIC processor, Xilinx XC7VX690T FPGA platform},
	pages = {7436--7439},
	file = {IEEE Xplore Full Text PDF:/home/vladislove/Zotero/storage/CCLV2N8D/Fang et al. - 2019 - Generation scheme of chirp scaling phase functions.pdf:application/pdf;IEEE Xplore Abstract Record:/home/vladislove/Zotero/storage/LDQ7XD3A/8916167.html:text/html}
}

@misc{noauthor_intro_nodate,
	title = {Intro - {Verilator} - {Veripool}},
	url = {https://www.veripool.org/wiki/verilator},
	urldate = {2020-07-16},
	file = {Intro - Verilator - Veripool:/home/vladislove/Zotero/storage/JAZSFA4C/verilator.html:text/html}
}

@misc{noauthor_manual-verilator_nodate,
	title = {Manual-verilator - {Verilator} - {Veripool}},
	url = {https://www.veripool.org/projects/verilator/wiki/Manual-verilator},
	urldate = {2020-07-23},
	file = {Manual-verilator - Verilator - Veripool:/home/vladislove/Zotero/storage/HHXD6QLU/Manual-verilator.html:text/html}
}

@incollection{lameres_modeling_2019,
	address = {Cham},
	title = {Modeling {Finite} {State} {Machines}},
	isbn = {978-3-030-10552-5},
	url = {https://doi.org/10.1007/978-3-030-10552-5_8},
	abstract = {In this chapter, we will look at modeling finite state machines (FSMs). An FSM is one of the most powerful circuits in a digital system because it can make decisions about the next output based on both the current and past inputs. Finite state machines are modeled using the constructs already covered in this book. In this chapter, we will look at the widely accepted three-process model for designing a FSM.},
	language = {en},
	urldate = {2020-07-27},
	booktitle = {Quick {Start} {Guide} to {Verilog}},
	publisher = {Springer International Publishing},
	author = {LaMeres, Brock J.},
	editor = {LaMeres, Brock J.},
	year = {2019},
	doi = {10.1007/978-3-030-10552-5_8},
	pages = {113--127}
}

@incollection{lameres_verilog_2019,
	address = {Cham},
	title = {Verilog {Constructs}},
	isbn = {978-3-030-10552-5},
	url = {https://doi.org/10.1007/978-3-030-10552-5_2},
	abstract = {This chapter begins looking at the basic construction of a Verilog module. The chapter begins by covering the built-in features of a Verilog module including the file structure, data types, operators, and declarations. It provides a foundation of Verilog that will lead to modeling examples provided in Chap. 3. The original Verilog standard (IEEE 1364) has been updated numerous times since its creation in 1995. The most significant update occurred in 2001, which was titled IEEE 1394-2001. In 2005, minor improvements were added to the standard, which resulted in IEEE 1394-2005. The constructs described in this book reflect the functionality in the IEEE 1394-2005 standard. The functionality of Verilog (e.g., operators, signal types, functions) is defined within the Verilog standard; thus, it is not necessary to explicitly state that a design is using the IEEE 1394 package because it is inherent in the use of Verilog.},
	language = {en},
	urldate = {2020-07-27},
	booktitle = {Quick {Start} {Guide} to {Verilog}},
	publisher = {Springer International Publishing},
	author = {LaMeres, Brock J.},
	editor = {LaMeres, Brock J.},
	year = {2019},
	doi = {10.1007/978-3-030-10552-5_2},
	pages = {13--22}
}

@incollection{lameres_computer_2019,
	address = {Cham},
	title = {Computer {System} {Design}},
	isbn = {978-3-030-10552-5},
	url = {https://doi.org/10.1007/978-3-030-10552-5_11},
	abstract = {This chapter presents the design of a simple computer system that will illustrate the use of many of the Verilog modeling techniques covered in this book. The goal of this chapter is not to provide an in-depth coverage of modern computer architecture, but rather to present a simple operational computer that can be implemented in Verilog to show how to use many of the modeling techniques covered thus far. The chapter begins with some architectural definitions so that consistent terminology can be used throughout the computer design example.},
	language = {en},
	urldate = {2020-07-27},
	booktitle = {Quick {Start} {Guide} to {Verilog}},
	publisher = {Springer International Publishing},
	author = {LaMeres, Brock J.},
	editor = {LaMeres, Brock J.},
	year = {2019},
	doi = {10.1007/978-3-030-10552-5_11},
	pages = {143--186}
}
